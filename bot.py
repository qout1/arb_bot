import ccxt
import time
import requests
import threading
from collections import deque

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
TELEGRAM_TOKEN = "7827921634:AAEr0whnhrDNibZxUtTXZHtr31eAqdV6gr0"
CHAT_ID = "1192605614"

EXCHANGE_NAMES = ['binance', 'bybit', 'bitget', 'mexc']  # –±–∏—Ä–∂–∏
QUOTE_FILTER = 'USDT'        # —Ñ–∏–ª—å—Ç—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
MIN_SPREAD = 5.0             # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–ø—Ä–µ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
MIN_VOLUME_USDT = 5000       # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ USDT
CHECK_INTERVAL = 30          # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫)
LOAD_PAUSE = 1.0             # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –±–∏—Ä–∂

# ========= –°–û–°–¢–û–Ø–ù–ò–ï =========
notifications_enabled = True
last_spreads = deque(maxlen=5)  # —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–ø—Ä–µ–¥–æ–≤


# ========= TELEGRAM =========
def send_telegram(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    global notifications_enabled
    if not notifications_enabled and not msg.startswith("üîî") and not msg.startswith("üîï"):
        print("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, data={'chat_id': CHAT_ID, 'text': msg, 'parse_mode': 'HTML'})
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Telegram:", e)


def check_telegram_commands():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ /on /off /status /spred /setspread /setvolume /setinterval"""
    global notifications_enabled, MIN_SPREAD, MIN_VOLUME_USDT, CHECK_INTERVAL
    offset = 0
    while True:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates?offset={offset}"
            response = requests.get(url).json()

            if "result" in response:
                for update in response["result"]:
                    offset = update["update_id"] + 1
                    if "message" not in update:
                        continue

                    text = update["message"].get("text", "").lower()
                    chat_id = update["message"]["chat"]["id"]

                    if str(chat_id) != str(CHAT_ID):
                        continue  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ —á–∞—Ç—ã

                    if text == "/off":
                        notifications_enabled = False
                        send_telegram("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø—Ä–µ–¥–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã.")
                    elif text == "/on":
                        notifications_enabled = True
                        send_telegram("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø—Ä–µ–¥–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã.")
                    elif text == "/status":
                        status_text = (
                            "üìä <b>–°—Ç–∞—Ç—É—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n\n"
                            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                            f"‚Ä¢ –ë–∏—Ä–∂–∏: {', '.join(EXCHANGE_NAMES)}\n"
                            f"‚Ä¢ –í–∞–ª—é—Ç–∞: {QUOTE_FILTER}\n"
                            f"‚Ä¢ –ú–∏–Ω. —Å–ø—Ä–µ–¥: {MIN_SPREAD}%\n"
                            f"‚Ä¢ –ú–∏–Ω. –æ–±—ä—ë–º: {MIN_VOLUME_USDT} USDT\n"
                            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫"
                        )
                        send_telegram(status_text)
                    elif text == "/spred":
                        if not last_spreads:
                            send_telegram("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤.")
                        else:
                            msg = "üíπ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã:</b>\n\n"
                            for s in list(last_spreads)[-5:]:
                                msg += s + "\n\n"
                            send_telegram(msg)
                    elif text.startswith("/setspread"):
                        try:
                            parts = text.split()
                            if len(parts) != 2:
                                send_telegram("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setspread 0.8")
                                continue
                            new_spread = float(parts[1])
                            if new_spread <= 0 or new_spread > 100:
                                send_telegram("‚ö†Ô∏è –°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –º–µ–Ω—å—à–µ 100.")
                                continue
                            MIN_SPREAD = new_spread
                            send_telegram(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {MIN_SPREAD:.2f}%")
                        except ValueError:
                            send_telegram("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setspread 0.8")
                    elif text.startswith("/setvolume"):
                        try:
                            parts = text.split()
                            if len(parts) != 2:
                                send_telegram("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setvolume 500")
                                continue
                            new_volume = float(parts[1])
                            if new_volume <= 0:
                                send_telegram("‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                                continue
                            MIN_VOLUME_USDT = new_volume
                            send_telegram(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {MIN_VOLUME_USDT:.2f} USDT")
                        except ValueError:
                            send_telegram("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setvolume 500")
                    elif text.startswith("/setinterval"):
                        try:
                            parts = text.split()
                            if len(parts) != 2:
                                send_telegram("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval 30")
                                continue
                            new_interval = float(parts[1])
                            if new_interval < 1:
                                send_telegram("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã.")
                                continue
                            CHECK_INTERVAL = new_interval
                            send_telegram(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {CHECK_INTERVAL:.1f} —Å–µ–∫")
                        except ValueError:
                            send_telegram("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setinterval 30")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:", e)
        time.sleep(3)


# ========= –§–£–ù–ö–¶–ò–ò –ê–†–ë–ò–¢–†–ê–ñ–ê =========
def create_exchanges(names):
    exs = {}
    for n in names:
        try:
            ex = getattr(ccxt, n)({'enableRateLimit': True})
            exs[n] = ex
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {n}: {e}")
    return exs


def market_is_active(market):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
    if market.get('active') is False:
        return False
    info = market.get('info', {})
    status = str(info.get('status') or info.get('state') or '').lower()
    if status and status not in ('trading', 'online', 'active', 'ok'):
        return False
    if str(info.get('isFrozen', '0')).lower() in ('1', 'true'):
        return False
    if str(info.get('isTrading', 'true')).lower() in ('0', 'false'):
        return False
    return True


def load_tradeable_markets(exchanges, quote_filter):
    result = {}
    for name, ex in exchanges.items():
        try:
            print(f"–ó–∞–≥—Ä—É–∂–∞—é —Ä—ã–Ω–∫–∏ {name}...")
            ex.load_markets()
            symbols = [
                sym for sym, m in ex.markets.items()
                if sym.endswith(f"/{quote_filter}") and market_is_active(m)
            ]
            result[name] = {'instance': ex, 'symbols': symbols}
            print(f"  {name}: {len(symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä")
            time.sleep(LOAD_PAUSE)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {name}: {e}")
    return result


def get_best_prices(ex, symbol):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—ã bid/ask –∏ –æ–±—ä—ë–º—ã"""
    try:
        ob = ex.fetch_order_book(symbol, 5)
        bids, asks = ob.get('bids', []), ob.get('asks', [])
        if not bids or not asks:
            return None, None, None, None
        bid_p, bid_v = bids[0]
        ask_p, ask_v = asks[0]
        return bid_p, bid_v, ask_p, ask_v
    except:
        return None, None, None, None


def check_all_pairs(exchanges_info):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    all_symbols = set()
    for info in exchanges_info.values():
        all_symbols.update(info['symbols'])

    for symbol in sorted(all_symbols):
        prices = {}
        liquidity = {}

        for name, info in exchanges_info.items():
            ex = info['instance']
            if symbol not in info['symbols']:
                continue
            bid_p, bid_v, ask_p, ask_v = get_best_prices(ex, symbol)
            if not bid_p or not ask_p:
                continue
            if (bid_p * bid_v < MIN_VOLUME_USDT) or (ask_p * ask_v < MIN_VOLUME_USDT):
                continue

            mid_price = (bid_p + ask_p) / 2
            prices[name] = mid_price
            liquidity[name] = int((bid_p * bid_v + ask_p * ask_v) / 2)

        if len(prices) < 2:
            continue

        min_ex = min(prices, key=prices.get)
        max_ex = max(prices, key=prices.get)
        min_price = prices[min_ex]
        max_price = prices[max_ex]
        spread = ((max_price - min_price) / min_price) * 100

        if spread >= MIN_SPREAD:
            msg = (
                f"üí∏ <b>{symbol}</b>\n"
                f"–ö—É–ø–∏—Ç—å –Ω–∞ <b>{min_ex}</b> ‚Äî <code>{min_price:.4f}</code>\n"
                f"–ü—Ä–æ–¥–∞—Ç—å –Ω–∞ <b>{max_ex}</b> ‚Äî <code>{max_price:.4f}</code>\n"
                f"üìà –°–ø—Ä–µ–¥: <b>+{spread:.2f}%</b>\n"
                f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity[min_ex]}‚Äì{liquidity[max_ex]} USDT"
            )
            last_spreads.append(msg)
            print(msg)
            send_telegram(msg)


# ========= –ó–ê–ü–£–°–ö =========
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    send_telegram("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /on, /off, /status, /spred –∏ /setspread –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    threading.Thread(target=check_telegram_commands, daemon=True).start()

    exchanges = create_exchanges(EXCHANGE_NAMES)
    exchanges_info = load_tradeable_markets(exchanges, QUOTE_FILTER)
    print("–ë–∏—Ä–∂–∏ –∏ –ø–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤...")

    while True:
        try:
            check_all_pairs(exchanges_info)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:", e)
        time.sleep(CHECK_INTERVAL)



